{"version":3,"sources":["init/routerEnums.ts","modals/TestModal/TestModal.tsx","store/routerStore.ts","modals/RootModal.tsx","components/TestCell.tsx","utils.tsx","api/Api.ts","panels/Home/Home.tsx","components/Image.tsx","panels/Test/FirstClickContent.tsx","panels/Test/Questions.tsx","panels/Test/FiveSecContent.tsx","panels/Test/SideBySideContent.tsx","panels/Test/TestContent.tsx","panels/Test/Test.tsx","panels/Success/Success.tsx","panels/MyTests/MyTests.tsx","panels/Statistic/SideBySideStat.tsx","panels/Statistic/FirstClickStat.tsx","panels/Statistic/FiveSecStat.tsx","panels/Statistic/Statistic.tsx","store/createTestStore.ts","panels/CreateQuestion/CreateQuestion.tsx","panels/CreateTest/CreateTest.tsx","panels/EditQuestion/EditQuestion.tsx","App.tsx","init/Adaptive.tsx","init/ConfigProvider.tsx","index.tsx"],"names":["ViewIds","PanelIds","ModalIds","TestModal","memo","id","onClose","right","onClick","useRouterStore","create","set","get","panelHistory","Home","activePanel","panelParams","setActivePanel","params","state","closeActivePanel","currentPanelHistory","currentPanelParams","slice","length","lastIndex","actionBackPanel","modalHistory","activeModal","setActiveModal","closeActiveModal","currentModalHistory","actionBackModal","viewHistory","BaseFlow","activeView","setActiveView","closeActiveView","currentViewHistory","actionBackView","RootModal","TestCell","style","disabled","cellProps","multiline","boxShadow","borderRadius","marginBottom","backgroundColor","getCaption","type","getAfterText","status","getIcon","height","width","fill","marginRight","marginTop","authParams","rParams","location","search","split","forEach","value","param","getAuthParams","fetchData","a","url","method","data","options","mode","cache","credentials","headers","Authorization","JSON","stringify","redirect","referrerPolicy","body","fetch","response","Error","contentType","indexOf","json","text","useState","availableTests","setAvailableTests","unavailableTests","setUnavailableTests","loading","setLoading","error","setError","useEffect","hashParams","window","hash","replace","reduce","acc","cur","key","test","Test","avTests","historyTests","reverse","separator","padding","paddingTop","paddingBottom","selected","MyTests","icon","weight","map","_id","testType","title","caption","before","after","actions","opacity","Image","imgUrl","onLoadCallback","rest","imgRef","useRef","imgIsLoaded","setImgIsLoaded","onLoadCallbackRef","current","onload","display","complete","Event","ref","src","alt","e","getBoundingClientRect","left","top","Question","index","len","color","clientX","clientY","textAlign","FirstClickContent","questions","currentQuestion","setCurrentQuestion","handleOnClick","answer","questionId","Success","testName","setValue","showImage","setShowImage","setTimeout","onChange","ev","target","placeholder","Questions","FiveSecContent","setSelected","idx","slideIndex","bullets","showArrows","slideWidth","href","rel","name","checked","SideBySideContent","TestContent","testData","startContent","getContent","content","setContent","description","action","header","setTestData","alignItems","myTests","setMyTests","onTestStatusChange","useCallback","copyLinkToClipboard","bridge","send","deleteTest","tests","aside","CreateTest","aria-label","defaultChecked","Statistic","testId","size","ProgressWithLabel","percent","label","gap","SideBySideStat","question","sep","total","results","firstTotal","filter","item","twoTotal","gridGap","image","Math","floor","Bullet","x","y","position","border","FirstClickStat","res","Comment","date","Date","toLocaleDateString","hour","minute","FiveSecStat","createdAt","setResults","getResults","renderStatistic","useCreateTestStore","updateName","updateDescription","desc","updateType","appendQuestion","deleteQuestion","newQuestions","splice","clearAll","undefined","CreateQuestion","setTitle","setHref","href2","setHref2","push","EditQuestion","descriptionFromStore","isEditing","setDescription","handleSubmit","onBlur","justifyContent","App","panelsHistory","closePanel","onSwipeBack","history","modal","Adaptive","node","anchorNode","resizeObserver","ResizeObserver","entry","contentRect","observe","unobserve","sizeX","SizeType","REGULAR","sizeY","COMPACT","viewWidth","ViewWidth","DESKTOP","noLegacyClasses","animate","ConfigProvider","Scheme","BRIGHT_LIGHT","scheme","setScheme","bridgeListener","detail","subscribe","unsubscribe","platform","Platform","VKCOM","webviewType","WebviewType","INTERNAL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc504266.chunk.js","sourcesContent":["export enum ViewIds {\n  BaseFlow = 'BaseFlow',\n}\n\nexport enum PanelIds {\n  Home = 'Home',\n  MyTests = 'MyTests',\n  Test = 'Test',\n  Success = 'Success',\n  Statistic = 'Statistic',\n  CreateQuestion = 'CreateQuestion',\n  CreateTest = 'CreateTest',\n  EditQuestion = 'EditQuestion',\n}\n\nexport enum ModalIds {\n  TestModal = 'TestModal',\n}\n","import { FC, memo } from 'react';\n\nimport { Div, ModalPage, ModalPageHeader, PanelHeaderButton } from '@vkontakte/vkui';\nimport { Icon24DoneOutline } from '@vkontakte/icons';\n\nimport { TDefaultModal } from '../TDefaultModal';\n\nexport const TestModal: FC<TDefaultModal> = memo(({ id, onClose }) => (\n  <ModalPage id={id} onClose={onClose}>\n    <ModalPageHeader\n      right={\n        <PanelHeaderButton>\n          <Icon24DoneOutline onClick={onClose} />\n        </PanelHeaderButton>\n      }\n    >\n      Test VKUI Modal\n    </ModalPageHeader>\n    <Div>\n      Some content\n      <br />\n      Some big content\n    </Div>\n  </ModalPage>\n));\n","import { ModalIds, PanelIds, ViewIds } from 'init/routerEnums';\nimport create, { GetState, SetState } from 'zustand';\n\nexport const actionBackModal = (set: SetState<RouterStore>, get: GetState<RouterStore>) => {\n  let currentModalHistory = get().modalHistory;\n  currentModalHistory = currentModalHistory.slice(0, currentModalHistory.length - 1);\n  set(() => ({ modalHistory: currentModalHistory }));\n\n  const lastIndex = currentModalHistory.length - 1;\n  let activeModal;\n\n  if (lastIndex < 0) {\n    activeModal = null;\n  } else {\n    activeModal = currentModalHistory[lastIndex];\n  }\n\n  set({ activeModal });\n};\n\nexport const actionBackView = (set: SetState<RouterStore>, get: GetState<RouterStore>) => {\n  let currentViewHistory = get().viewHistory;\n  currentViewHistory = currentViewHistory.slice(0, currentViewHistory.length - 1);\n  set(() => ({\n    viewHistory: currentViewHistory,\n    activeView: currentViewHistory[currentViewHistory.length - 1],\n  }));\n};\n\nexport const actionBackPanel = (set: SetState<RouterStore>, get: GetState<RouterStore>) => {\n  let currentPanelHistory = get().panelHistory;\n  let currentPanelParams = get().panelParams;\n  currentPanelHistory = currentPanelHistory.slice(0, currentPanelHistory.length - 1);\n  currentPanelParams = currentPanelParams.slice(0, currentPanelParams.length - 1);\n  set(() => ({ panelHistory: currentPanelHistory, panelParams: currentPanelParams }));\n\n  const lastIndex = currentPanelHistory.length - 1;\n  let activePanel;\n\n  if (lastIndex < 0) {\n    activePanel = null;\n  } else {\n    activePanel = currentPanelHistory[lastIndex];\n  }\n\n  if (activePanel) {\n    set({ activePanel });\n  }\n};\n\ntype RouterStore = {\n  panelHistory: PanelIds[];\n  activePanel: PanelIds;\n  panelParams: (Record<string, any> | null)[];\n  setActivePanel(activePanel: PanelIds, params?: Record<string, any> | null): void;\n  closeActivePanel(): void;\n\n  modalHistory: ModalIds[];\n  activeModal: ModalIds | null;\n  setActiveModal(activeModal: ModalIds): void;\n  closeActiveModal(): void;\n\n  activeView: ViewIds;\n  viewHistory: ViewIds[];\n  setActiveView(activeView: ViewIds): void;\n  closeActiveView(): void;\n};\n\nexport const useRouterStore = create<RouterStore>((set, get) => ({\n  panelHistory: [PanelIds.Home],\n  activePanel: PanelIds.Home,\n  panelParams: [null],\n  setActivePanel: (activePanel, params = null) =>\n    set((state) => ({\n      activePanel,\n      panelHistory: [...state.panelHistory, activePanel],\n      panelParams: [...state.panelParams, params],\n    })),\n  closeActivePanel: () => actionBackPanel(set, get),\n\n  modalHistory: [],\n  activeModal: null,\n  setActiveModal: (activeModal) =>\n    set((state) => ({\n      activeModal,\n      modalHistory: [...state.modalHistory, activeModal],\n    })),\n  closeActiveModal: () => actionBackModal(set, get),\n\n  viewHistory: [ViewIds.BaseFlow],\n  activeView: ViewIds.BaseFlow,\n  setActiveView: (activeView) =>\n    set((state) => ({\n      activeView,\n      viewHistory: [...state.viewHistory, activeView],\n    })),\n  closeActiveView: () => actionBackView(set, get),\n}));\n","import { FC, memo } from 'react';\n\nimport { ModalRoot } from '@vkontakte/vkui';\n\nimport { ModalIds } from 'init/routerEnums';\n\nimport { TestModal } from './TestModal/TestModal';\nimport { useRouterStore } from '../store';\n\nexport const RootModal: FC = memo(() => {\n  const activeModal = useRouterStore((state) => state.activeModal);\n  const closeActiveModal = useRouterStore((state) => state.closeActiveModal);\n\n  return (\n    <ModalRoot activeModal={activeModal}>\n      <TestModal id={ModalIds.TestModal} onClose={closeActiveModal} />\n    </ModalRoot>\n  );\n});\n","import { RichCell, RichCellProps } from '@vkontakte/vkui';\nimport { CSSProperties } from 'react';\n\nexport function TestCell({\n  style,\n  disabled = true,\n  ...cellProps\n}: { style?: CSSProperties } & RichCellProps): JSX.Element {\n  return (\n    <RichCell\n      disabled={disabled}\n      multiline\n      style={{\n        boxShadow: '0px 0px 2px rgba(0, 0, 0, 0.04), 0px 4px 4px rgba(0, 0, 0, 0.08)',\n        borderRadius: 8,\n        marginBottom: 12,\n        backgroundColor: 'var(--modal_card_background',\n        ...style,\n      }}\n      {...cellProps}\n    />\n  );\n}\n","import { Icon56ComputerOutline, Icon56FragmentsOutline, Icon56RecentOutline } from '@vkontakte/icons';\nimport { TestStatus, TestType } from './store/testsMocks';\n\nexport const getCaption = (type: TestType): string => {\n  switch (type) {\n    case 'five_sec':\n      return '5 Sec Test';\n\n    case 'first_click':\n      return 'First Click';\n\n    case 'side_by_side':\n      return 'Side by Side';\n  }\n};\n\nexport const getAfterText = (status: TestStatus): string => {\n  switch (status) {\n    case 'available':\n      return 'Доступен';\n\n    case 'completed':\n      return 'Пройден';\n\n    case 'unavailable':\n      return 'Не пройден';\n  }\n};\n\nexport const getIcon = (type: TestType): JSX.Element => {\n  switch (type) {\n    case 'five_sec':\n      return (\n        <Icon56RecentOutline\n          height={48}\n          width={48}\n          fill=\"var(--dynamic_red)\"\n          style={{ marginRight: 12, marginTop: 8, marginBottom: 8 }}\n        />\n      );\n\n    case 'first_click':\n      return (\n        <Icon56ComputerOutline\n          height={48}\n          width={48}\n          fill=\"var(--dynamic_green)\"\n          style={{ marginRight: 12, marginTop: 8, marginBottom: 8 }}\n        />\n      );\n\n    case 'side_by_side':\n      return (\n        <Icon56FragmentsOutline\n          height={48}\n          width={48}\n          fill=\"var(--dynamic_orange)\"\n          style={{ marginRight: 12, marginTop: 8, marginBottom: 8 }}\n        />\n      );\n  }\n};\n","type FetchOptions = {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  mode: 'cors';\n  cache: 'no-cache';\n  credentials: 'same-origin';\n  headers: Record<string, string>;\n  redirect: 'follow';\n  referrerPolicy: 'no-referrer';\n  body?: string;\n};\n\nfunction getAuthParams() {\n  let rParams: any = {};\n\n  location.search\n    .slice(1)\n    .split('&')\n    .forEach((value) => {\n      const param = value.split('=');\n\n      rParams = {\n        ...rParams,\n        [param[0]]: param[1],\n      };\n    });\n\n  return rParams;\n}\n\nexport const authParams = getAuthParams();\n\nexport const fetchData = async (url = '', method: FetchOptions['method'] = 'GET', data = {}) => {\n  let options: FetchOptions = {\n    method, // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: JSON.stringify(authParams),\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n  };\n\n  if (method === 'POST' || method === 'PUT') {\n    options = {\n      ...options,\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    };\n  }\n\n  const response = await fetch(`https://lipton-it.herokuapp.com/api${url}`, options);\n\n  if (response.status !== 200) {\n    throw new Error();\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json();\n  }\n\n  return response.text();\n};\n","import React, { memo, useEffect, useState } from 'react';\nimport { PanelIds } from 'init/routerEnums';\nimport {\n  Button,\n  Div,\n  Group,\n  Headline,\n  Panel,\n  PanelHeader,\n  PanelSpinner,\n  Placeholder,\n  Spacing,\n  Tabs,\n  TabsItem,\n} from '@vkontakte/vkui';\nimport { Icon56UsersOutline } from '@vkontakte/icons';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { TestCell } from '../../components/TestCell';\nimport { TTest } from '../../store/testsMocks';\nimport { getAfterText, getCaption, getIcon } from '../../utils';\nimport { fetchData } from '../../api/Api';\n\nexport const Home: React.FC<TPanel> = memo(({ id }) => {\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n  const [availableTests, setAvailableTests] = useState<TTest[]>([]);\n  const [unavailableTests, setUnavailableTests] = useState<TTest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const hashParams = window.location.hash\n      .replace('#', '')\n      .split('&')\n      .reduce((acc: Record<string, string>, cur) => {\n        const [key, value] = cur.split('=');\n        acc[key] = value;\n\n        return acc;\n      }, {});\n    if (hashParams.test) {\n      setActivePanel(PanelIds.Test, { id: hashParams.test });\n      window.location.hash = '';\n    }\n  }, [setActivePanel]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const avTests = await fetchData('/test');\n        const historyTests = await fetchData('/test/history');\n        setAvailableTests(avTests.reverse());\n        setUnavailableTests(historyTests.reverse());\n      } catch (e) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader separator={false}>Исследования</PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <Div style={{ paddingTop: 0, paddingBottom: 0 }}>\n          <Tabs>\n            <TabsItem selected>Главная</TabsItem>\n            <TabsItem onClick={() => setActivePanel(PanelIds.MyTests)} selected={false}>\n              Мои исследования\n            </TabsItem>\n          </Tabs>\n        </Div>\n        <Spacing separator />\n\n        <Div>\n          {error && <Placeholder>Ошибка</Placeholder>}\n          {loading && <PanelSpinner />}\n          {!error && !loading && !availableTests.length && !unavailableTests.length && (\n            <Placeholder icon={<Icon56UsersOutline />}>Пока нет доступных тестов</Placeholder>\n          )}\n          {!error && !loading && (\n            <>\n              {!!availableTests.length && (\n                <>\n                  <Headline weight=\"regular\" style={{ paddingBottom: 24 }}>\n                    Доступные исследования\n                  </Headline>\n                  {availableTests.map(({ _id: id, testType, title, status }) => (\n                    <TestCell\n                      key={id}\n                      caption={getCaption(testType)}\n                      before={getIcon(testType)}\n                      after={getAfterText(status)}\n                      actions={\n                        <Button mode=\"secondary\" onClick={() => setActivePanel(PanelIds.Test, { id })}>\n                          Пройти\n                        </Button>\n                      }\n                    >\n                      {title}\n                    </TestCell>\n                  ))}\n                </>\n              )}\n              {!!unavailableTests.length && (\n                <>\n                  <Headline\n                    weight=\"regular\"\n                    style={{\n                      paddingBottom: 24,\n                      ...(!!availableTests.length && { paddingTop: 36 }),\n                    }}\n                  >\n                    История исследований\n                  </Headline>\n                  {unavailableTests.map(({ _id, testType, title, status }) => (\n                    <TestCell\n                      key={_id}\n                      caption={getCaption(testType)}\n                      before={getIcon(testType)}\n                      after={getAfterText(status)}\n                      style={{ opacity: 0.4 }}\n                    >\n                      {title}\n                    </TestCell>\n                  ))}\n                </>\n              )}\n            </>\n          )}\n          {/*  <Button onClick={() => setActiveModal(ModalIds.TestModal)} size=\"m\" stretched>Open modal</Button> */}\n          {/*  <Button onClick={() => setActivePanel(PanelIds.Test, { id: 5 })} size=\"m\" stretched>Open Test</Button> */}\n        </Div>\n      </Group>\n    </Panel>\n  );\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport { PanelSpinner } from '@vkontakte/vkui';\n\nexport function Image({\n  imgUrl,\n  onLoadCallback,\n  onClick,\n  ...rest\n}: {\n  imgUrl: string;\n  onLoadCallback?: () => void;\n  onClick?: (e: React.MouseEvent<HTMLImageElement>, left?: number, top?: number) => void;\n} & Omit<\n  React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>,\n  'onClick'\n>): JSX.Element {\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [imgIsLoaded, setImgIsLoaded] = useState(false);\n  const onLoadCallbackRef = useRef(onLoadCallback).current;\n\n  useEffect(() => {\n    if (imgUrl && imgRef.current && !imgIsLoaded) {\n      imgRef.current.onload = () => {\n        if (imgRef.current) {\n          imgRef.current.style.display = 'block';\n          setImgIsLoaded(true);\n          onLoadCallbackRef?.();\n        }\n      };\n\n      //  на ios не файрится событие onload для img\n      if (imgRef.current.complete) {\n        // Костыль но онлоад требует ивент\n        imgRef.current.onload(new Event('onload'));\n      }\n    }\n  }, [imgUrl, imgIsLoaded, setImgIsLoaded, imgRef.current?.complete, onLoadCallbackRef]);\n\n  return (\n    <>\n      {!imgIsLoaded && <PanelSpinner />}\n      <img\n        ref={imgRef}\n        src={imgUrl}\n        width=\"100%\"\n        alt=\"\"\n        onClick={(e) => {\n          const { left, top } = imgRef.current?.getBoundingClientRect() ?? {};\n\n          onClick?.(e, left, top);\n        }}\n        {...rest}\n      />\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { Button, Headline, Subhead } from '@vkontakte/vkui';\nimport { useRouterStore } from '../../store';\nimport { PanelIds } from '../../init/routerEnums';\nimport { Image } from '../../components/Image';\nimport { TestQuestion, TTestData } from '../../store/testsMocks';\nimport { fetchData } from '../../api/Api';\n\nfunction Question({\n  title,\n  data,\n  index,\n  len,\n  onClick,\n  _id,\n}: TestQuestion & {\n  index: number;\n  len: number;\n  onClick: (answer: string, questionId: string) => void;\n}): JSX.Element {\n  return (\n    <>\n      <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 2 }}>\n        Вопрос {index + 1} из {len}\n      </Subhead>\n      <Headline weight=\"regular\">{title}</Headline>\n      <Image\n        imgUrl={data[0]}\n        onClick={(e, left, top) => {\n          onClick(`${e.clientX - (left ?? 0)}|${e.clientY - (top ?? 0)}`, _id);\n        }}\n        style={{ marginTop: 24, width: '100%' }}\n      />\n      <div style={{ textAlign: 'right' }}>\n        <Button disabled style={{ marginTop: 24 }}>\n          Для ответа нажмите на картинку\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport function FirstClickContent({ title, questions }: TTestData): JSX.Element {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n\n  const handleOnClick = async (answer: string, questionId: string) => {\n    await fetchData('/results', 'POST', {\n      questionId,\n      data: answer,\n    });\n    if (currentQuestion === questions.length - 1) {\n      setActivePanel(PanelIds.Success, { testName: title });\n    } else {\n      setCurrentQuestion((state) => state + 1);\n    }\n  };\n\n  return (\n    <Question {...questions[currentQuestion]} index={currentQuestion} len={questions.length} onClick={handleOnClick} />\n  );\n}\n","import { Button, Headline, Subhead, Textarea } from '@vkontakte/vkui';\nimport { useEffect, useState } from 'react';\nimport { useRouterStore } from '../../store';\nimport { PanelIds } from '../../init/routerEnums';\nimport { TestQuestion } from '../../store/testsMocks';\nimport { Image } from '../../components/Image';\nimport { fetchData } from '../../api/Api';\n\nfunction Question({\n  title,\n  data,\n  _id,\n  len,\n  onClick,\n  index,\n}: TestQuestion & {\n  len: number;\n  onClick: (answer: string, questionId: string) => void;\n  index: number;\n}) {\n  const [value, setValue] = useState<string>();\n  const [showImage, setShowImage] = useState(true);\n\n  useEffect(\n    () => () => {\n      setValue('');\n      setShowImage(true);\n    },\n    [index],\n  );\n\n  return showImage ? (\n    <Image\n      imgUrl={data[0]}\n      onLoadCallback={() =>\n        setTimeout(() => {\n          setShowImage(false);\n        }, 5000)\n      }\n    />\n  ) : (\n    <>\n      <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 2 }}>\n        Вопрос {index + 1} из {len}\n      </Subhead>\n      <Headline weight=\"regular\">{title}</Headline>\n      <Subhead style={{ color: 'var(--text_secondary)', paddingTop: 24, paddingBottom: 6 }}>Ответ</Subhead>\n      <Textarea onChange={(ev) => setValue(ev.target.value)} value={value} placeholder=\"Напишите развёрнуто...\" />\n      <div style={{ textAlign: 'right' }}>\n        <Button\n          disabled={!value}\n          onClick={() => {\n            if (value) {\n              onClick(value, _id);\n            }\n          }}\n          style={{ marginTop: 24 }}\n        >\n          {index === len - 1 ? 'Завершить тест' : 'Следующий вопрос'}\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport function Questions({ questions, title }: { questions: TestQuestion[]; title: string }): JSX.Element {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n\n  const handleOnClick = async (answer: string, questionId: string) => {\n    await fetchData('/results', 'POST', {\n      questionId,\n      data: answer,\n    });\n    if (currentQuestion === questions.length - 1) {\n      setActivePanel(PanelIds.Success, { testName: title });\n    } else {\n      setCurrentQuestion((state) => state + 1);\n    }\n  };\n\n  return (\n    <Question {...questions[currentQuestion]} index={currentQuestion} len={questions.length} onClick={handleOnClick} />\n  );\n}\n","import { Questions } from './Questions';\nimport { TTestData } from '../../store/testsMocks';\n\nexport function FiveSecContent({ title, questions }: TTestData): JSX.Element {\n  return <Questions questions={questions} title={title} />;\n}\n","import { useState } from 'react';\nimport { Button, Caption, Gallery, Headline, Radio, Subhead, Text } from '@vkontakte/vkui';\nimport { useRouterStore } from '../../store';\nimport { PanelIds } from '../../init/routerEnums';\nimport { Image } from '../../components/Image';\nimport { TestQuestion, TTestData } from '../../store/testsMocks';\nimport { fetchData } from '../../api/Api';\n\nfunction Question({\n  title,\n  index,\n  len,\n  data,\n  _id,\n  onClick,\n}: TestQuestion & {\n  index: number;\n  len: number;\n  onClick: (answer: 0 | 1, questionId: string) => void;\n}): JSX.Element {\n  const [selected, setSelected] = useState<0 | 1>(0);\n\n  return (\n    <>\n      <Subhead style={{ color: 'var(--text_secondary)' }}>\n        Вопрос {index + 1} из {len}\n      </Subhead>\n      <Headline weight=\"regular\">{title}</Headline>\n      <Caption style={{ paddingTop: 6, color: 'var(--text_secondary)' }}>\n        (кликните по картинке, чтобы увеличить)\n      </Caption>\n      <Gallery\n        onChange={(idx) => setSelected(idx as 0 | 1)}\n        slideIndex={selected}\n        bullets={false}\n        showArrows\n        slideWidth=\"90%\"\n        style={{ marginTop: 24 }}\n      >\n        <div>\n          <a target=\"_blank\" href={data[0]} rel=\"noreferrer\" style={{ display: 'block', marginRight: 12 }}>\n            <Image imgUrl={data[0]} />\n          </a>\n          <Text weight=\"regular\" style={{ color: 'var(--text_secondary)', paddingTop: 12 }}>\n            1 вариант\n          </Text>\n        </div>\n        <div>\n          <a target=\"_blank\" href={data[1]} rel=\"noreferrer\" style={{ display: 'block', marginRight: 12 }}>\n            <Image imgUrl={data[1] ?? ''} />\n          </a>\n          <Text weight=\"regular\" style={{ color: 'var(--text_secondary)', paddingTop: 12 }}>\n            2 вариант\n          </Text>\n        </div>\n      </Gallery>\n      <Subhead weight=\"regular\" style={{ paddingTop: 32, color: 'var(--text_secondary)' }}>\n        Выберите вариант ответа\n      </Subhead>\n      <div style={{ display: 'flex', paddingTop: 2 }}>\n        <Radio name=\"variant\" checked={selected === 0} onClick={() => setSelected(0)}>\n          1 вариант\n        </Radio>\n        <Radio name=\"variant\" checked={selected === 1} onClick={() => setSelected(1)}>\n          2 вариант\n        </Radio>\n      </div>\n      <div style={{ textAlign: 'right' }}>\n        <Button\n          style={{ marginTop: 24 }}\n          onClick={() => {\n            setSelected(0);\n            onClick(selected, _id);\n          }}\n        >\n          {index === len - 1 ? 'Завершить тест' : 'Следующий вопрос'}\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport function SideBySideContent({ title, questions }: TTestData): JSX.Element {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n\n  const handleOnClick = async (answer: 0 | 1, questionId: string) => {\n    await fetchData('/results', 'POST', {\n      questionId,\n      data: `${answer}`,\n    });\n    if (currentQuestion === questions.length - 1) {\n      setActivePanel(PanelIds.Success, { testName: title });\n    } else {\n      setCurrentQuestion((state) => state + 1);\n    }\n  };\n\n  return (\n    <Question {...questions[currentQuestion]} index={currentQuestion} len={questions.length} onClick={handleOnClick} />\n  );\n}\n","import { Button, Placeholder } from '@vkontakte/vkui';\nimport { Icon56ComputerOutline, Icon56FragmentsOutline, Icon56RecentOutline } from '@vkontakte/icons';\nimport { useState } from 'react';\nimport { TTestData } from '../../store/testsMocks';\nimport { FirstClickContent } from './FirstClickContent';\nimport { FiveSecContent } from './FiveSecContent';\nimport { SideBySideContent } from './SideBySideContent';\n\nconst getContent = (testData: TTestData): { text: string; icon: JSX.Element; startContent?: JSX.Element } => {\n  switch (testData.testType) {\n    case 'first_click':\n      return {\n        text: 'Вы увидите вопрос и картинку. Нажмите на картинку в том месте, в котором считаете нужным. время не ограничено.',\n        icon: <Icon56ComputerOutline fill=\"var(--dynamic_green)\" />,\n        startContent: <FirstClickContent {...testData} />,\n      };\n    case 'five_sec':\n      return {\n        text: 'Вы увидите картинку на протяжении 5 секунд. Потом нужно будет ответить на вопрос.',\n        icon: <Icon56RecentOutline fill=\"var(--dynamic_red)\" />,\n        startContent: <FiveSecContent {...testData} />,\n      };\n    case 'side_by_side':\n      return {\n        text: 'В каждом вопросе будет 2 картинки. Нужно выбрать один вариант ответа. Таймера нет.',\n        icon: <Icon56FragmentsOutline fill=\"var(--dynamic_orange)\" />,\n        startContent: <SideBySideContent {...testData} />,\n      };\n  }\n};\n\nexport function TestContent(testData: TTestData): JSX.Element {\n  const { icon, text, startContent } = getContent(testData);\n  const [content, setContent] = useState<JSX.Element>();\n  const { title, description } = testData;\n\n  return (\n    content || (\n      <Placeholder icon={icon} action={<Button onClick={() => setContent(startContent)}>Начать</Button>} header={title}>\n        {text}\n        {description && (\n          <>\n            <br />\n            <br />\n            {description}\n          </>\n        )}\n      </Placeholder>\n    )\n  );\n}\n","import { FC, memo, useEffect, useRef, useState } from 'react';\nimport { Div, Group, Panel, PanelHeader, PanelSpinner, Placeholder, Spacing, Tappable, Text } from '@vkontakte/vkui';\nimport { Icon28ChevronLeftOutline } from '@vkontakte/icons';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { TTestData } from '../../store/testsMocks';\nimport { TestContent } from './TestContent';\nimport { fetchData } from '../../api/Api';\n\nexport const Test: FC<TPanel> = memo(({ id }) => {\n  const closeActivePanel = useRouterStore((state) => state.closeActivePanel);\n  const panelParams = useRef(useRouterStore((state) => state.panelParams[state.panelParams.length - 1]));\n  const [testData, setTestData] = useState<TTestData>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { id } = panelParams.current as { id: string };\n        const test = await fetchData(`/test/${id}`);\n        setTestData(test);\n      } catch (e) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader\n          separator={false}\n          left={\n            <Tappable\n              onClick={closeActivePanel}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0 10px 2px 0',\n              }}\n            >\n              <Icon28ChevronLeftOutline fill=\"var(--icon_medium)\" />\n              <Text weight=\"regular\" style={{ color: 'var(--text_secondary)' }}>\n                Назад\n              </Text>\n            </Tappable>\n          }\n        >\n          {testData?.title}\n        </PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        {error && <Placeholder>Ошибка, такого теста не существует</Placeholder>}\n        {loading && <PanelSpinner />}\n        {!error && !loading && testData && (\n          <Div>\n            <TestContent {...testData} />\n          </Div>\n        )}\n      </Group>\n    </Panel>\n  );\n});\n","import { FC, memo, useRef } from 'react';\nimport { Icon56CheckCircleOutline } from '@vkontakte/icons';\nimport { Button, Group, Panel, PanelHeader, Placeholder, Spacing } from '@vkontakte/vkui';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { PanelIds } from '../../init/routerEnums';\n\nexport const Success: FC<TPanel> = memo(({ id }) => {\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n  const panelParams = useRef(useRouterStore((state) => state.panelParams[state.panelParams.length - 1]));\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader separator={false}>Исследования</PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <Placeholder\n          icon={<Icon56CheckCircleOutline fill=\"var(--dynamic_green)\" />}\n          header=\"Спасибо, тест завершен\"\n          action={<Button onClick={() => setActivePanel(PanelIds.Home)}>Закрыть</Button>}\n        >\n          {panelParams.current?.testName}\n        </Placeholder>\n      </Group>\n    </Panel>\n  );\n});\n","import { Icon56UsersOutline } from '@vkontakte/icons';\nimport { FC, memo, useCallback, useEffect, useState } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n  Button,\n  Div,\n  Group,\n  Header,\n  Panel,\n  PanelHeader,\n  PanelSpinner,\n  Placeholder,\n  Spacing,\n  Switch,\n  Tabs,\n  TabsItem,\n} from '@vkontakte/vkui';\nimport { fetchData } from '../../api/Api';\nimport { TestCell } from '../../components/TestCell';\nimport { TTest } from '../../store/testsMocks';\nimport { getCaption, getIcon } from '../../utils';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { PanelIds } from '../../init/routerEnums';\n\nexport const MyTests: FC<TPanel> = memo(({ id }) => {\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n  const [myTests, setMyTests] = useState<TTest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const onTestStatusChange = useCallback(async (test: TTest) => {\n    try {\n      await fetchData(`/test/${test._id}`, 'PUT', {\n        ...test,\n        status: test.status === 'available' ? 'unavailable' : 'available',\n      });\n    } catch (e) {\n      setError(true);\n    }\n  }, []);\n\n  const copyLinkToClipboard = useCallback(async (test: TTest) => {\n    try {\n      await bridge.send('VKWebAppCopyText', { text: `https://vk.com/app8128820_6522588#test=${test._id}` });\n    } catch (e) {\n      setError(true);\n    }\n  }, []);\n\n  const deleteTest = async (test: TTest) => {\n    try {\n      await fetchData(`/test/${test._id}`, 'DELETE');\n      try {\n        const tests = await fetchData('/test/my');\n\n        setMyTests(tests);\n      } catch (e) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    (async function () {\n      try {\n        const tests = await fetchData('/test/my');\n\n        setMyTests(tests);\n      } catch (e) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader separator={false}>Исследования</PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <Div style={{ paddingTop: 0, paddingBottom: 0 }}>\n          <Tabs>\n            <TabsItem onClick={() => setActivePanel(PanelIds.Home)} selected={false}>\n              Главная\n            </TabsItem>\n            <TabsItem selected>Мои исследования</TabsItem>\n          </Tabs>\n        </Div>\n        <Spacing separator />\n        <Div>\n          {error && <Placeholder>Ошибка</Placeholder>}\n          {loading && <PanelSpinner />}\n          {!error && !loading && (\n            <>\n              {myTests.length ? (\n                <>\n                  <Header\n                    mode=\"primary\"\n                    aside={\n                      <Button mode=\"tertiary\" onClick={() => setActivePanel(PanelIds.CreateTest)}>\n                        Создать тест\n                      </Button>\n                    }\n                  >\n                    Ваши тесты\n                  </Header>\n                  {myTests.map((test) => (\n                    <TestCell\n                      key={test._id}\n                      caption={getCaption(test.testType)}\n                      before={getIcon(test.testType)}\n                      after={\n                        <Switch\n                          aria-label=\"Включить\"\n                          defaultChecked={test.status === 'available'}\n                          onChange={() => {\n                            onTestStatusChange(test);\n                          }}\n                        />\n                      }\n                      actions={\n                        <>\n                          <Button\n                            mode=\"secondary\"\n                            onClick={() => setActivePanel(PanelIds.Statistic, { testId: test._id })}\n                          >\n                            Статистика\n                          </Button>\n\n                          <Button mode=\"tertiary\" onClick={() => copyLinkToClipboard(test)}>\n                            Скопировать ссылку\n                          </Button>\n\n                          <Button\n                            mode=\"tertiary\"\n                            style={{ color: 'var(--destructive)' }}\n                            onClick={() => deleteTest(test)}\n                          >\n                            Удалить тест\n                          </Button>\n                        </>\n                      }\n                    >\n                      {test.title}\n                    </TestCell>\n                  ))}\n                </>\n              ) : (\n                <Placeholder\n                  icon={<Icon56UsersOutline />}\n                  action={\n                    <Button size=\"m\" onClick={() => setActivePanel(PanelIds.CreateTest)}>\n                      Создать тест\n                    </Button>\n                  }\n                >\n                  Вы не создали ни одного теста\n                </Placeholder>\n              )}\n            </>\n          )}\n        </Div>\n      </Group>\n    </Panel>\n  );\n});\n","import { Div, Headline, Link, Progress, Spacing, Subhead } from '@vkontakte/vkui';\nimport { Image } from '../../components/Image';\nimport type { IQuestionWithResults } from './Statistic';\n\ntype TSideBySideStatProps = {\n  question: IQuestionWithResults;\n  sep: boolean;\n  title: string;\n};\n\ntype TProgressWithLabelProps = {\n  percent: number;\n  label: string;\n  gap?: boolean;\n};\n\nconst ProgressWithLabel = ({ percent, label, gap }: TProgressWithLabelProps) => {\n  return (\n    <>\n      <Progress value={percent} style={{ marginBottom: 6 }} />\n      <Headline weight=\"regular\">{label}</Headline>\n      {gap && <Spacing size={24} />}\n    </>\n  );\n};\n\nexport const SideBySideStat = ({ question, title, sep }: TSideBySideStatProps) => {\n  const total = question.results.length;\n  const firstTotal = question.results.filter((item) => item.data === '0').length;\n  const twoTotal = question.results.filter((item) => item.data === '1').length;\n\n  return (\n    <>\n      {sep && <Spacing separator size={12} />}\n\n      <Div>\n        <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 4 }}>{title}</Subhead>\n        <Headline weight=\"regular\">{question.title}</Headline>\n        <Spacing size={16} />\n        <div style={{ display: 'flex', alignItems: 'center', gridGap: '16px' }}>\n          {question.data.map((image, idx) => (\n            <Link key={`${image}_${idx}`} href={image} target=\"_blank\" style={{ width: '50%' }}>\n              <Image imgUrl={image} style={{ borderRadius: '8px' }} />\n            </Link>\n          ))}\n        </div>\n        <Spacing size={16} />\n        <ProgressWithLabel\n          percent={(firstTotal / total) * 100}\n          label={`Первый вариант — ${firstTotal} (${Math.floor((firstTotal / total) * 100)}%)`}\n          gap\n        />\n        <ProgressWithLabel\n          percent={(twoTotal / total) * 100}\n          label={`Второй вариант — ${twoTotal} (${Math.floor((twoTotal / total) * 100)}%)`}\n        />\n      </Div>\n    </>\n  );\n};\n","import { Headline, Spacing, Subhead } from '@vkontakte/vkui';\nimport { Image } from '../../components/Image';\nimport type { IQuestionWithResults } from './Statistic';\n\ntype TSideBySideStatProps = {\n  question: IQuestionWithResults;\n  sep: boolean;\n  title: string;\n};\n\ntype TBullet = {\n  x: number;\n  y: number;\n};\n\nconst Bullet = ({ x, y }: TBullet) => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        borderRadius: '50%',\n        left: x,\n        top: y,\n        backgroundColor: '#ff0000',\n        border: '1px solid #008000',\n        opacity: 0.5,\n        width: 5,\n        height: 5,\n      }}\n    />\n  );\n};\n\nexport const FirstClickStat = ({ question, title, sep }: TSideBySideStatProps) => {\n  return (\n    <>\n      {sep && <Spacing separator size={12} />}\n\n      <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 4 }}>{title}</Subhead>\n      <Headline weight=\"regular\">{question.title}</Headline>\n      <Spacing size={16} />\n      <div style={{ position: 'relative' }}>\n        <div style={{ position: 'absolute', width: '100%', height: '100%', left: 0, top: 0 }}>\n          {question.results.map((res) => {\n            const [x, y] = res.data.split('|');\n\n            return <Bullet x={+x} y={+y} key={res.data} />;\n          })}\n        </div>\n        <Image imgUrl={question.data?.[0]} style={{ borderRadius: '8px' }} />\n      </div>\n    </>\n  );\n};\n","import { Div, Spacing, Subhead, Headline, Link } from '@vkontakte/vkui';\nimport { Image } from '../../components/Image';\nimport type { IQuestionWithResults } from './Statistic';\n\ntype TSideBySideStatProps = {\n  question: IQuestionWithResults;\n  sep: boolean;\n  title: string;\n};\n\ntype TFiveSec = {\n  date: string;\n  text: string;\n};\n\nconst Comment = ({ date, text }: TFiveSec) => {\n  return (\n    <>\n      <Spacing size={16} />\n      <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 4 }}>\n        {new Date(date).toLocaleDateString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n      </Subhead>\n      <Headline weight=\"regular\">{text}</Headline>\n    </>\n  );\n};\n\nexport const FiveSecStat = ({ question, title, sep }: TSideBySideStatProps) => {\n  return (\n    <>\n      {sep && <Spacing separator size={12} />}\n\n      <Div>\n        <Subhead style={{ color: 'var(--text_secondary)', paddingBottom: 4 }}>{title}</Subhead>\n        <Headline weight=\"regular\">{question.title}</Headline>\n        <Spacing size={16} />\n        <Link href={question.data?.[0]} target=\"_blank\">\n          <Image imgUrl={question.data?.[0]} style={{ borderRadius: '8px' }} />\n        </Link>\n        {question.results.map((res) => (\n          <Comment date={res.createdAt} text={res.data} key={res.createdAt} />\n        ))}\n      </Div>\n    </>\n  );\n};\n","import { FC, memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { Div, Group, Panel, PanelHeader, Spacing, Tappable, Text } from '@vkontakte/vkui';\nimport { Icon28ChevronLeftOutline } from '@vkontakte/icons';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\n\nimport { TTest } from '../../store/testsMocks';\nimport { SideBySideStat } from './SideBySideStat';\nimport { FirstClickStat } from './FirstClickStat';\nimport { FiveSecStat } from './FiveSecStat';\nimport { fetchData } from '../../api/Api';\n\nexport type TQuestion = {\n  _id: string;\n  title: string;\n  testId: TTest['_id'];\n  data: string[];\n};\n\nexport type TResult = {\n  _id: string;\n  questionId: TQuestion['_id'];\n  userId: string;\n  data: string;\n  createdAt: string;\n};\n\nexport interface IQuestionWithResults extends TQuestion {\n  results: TResult[];\n}\n\nexport interface IStatistic extends TTest {\n  questions: IQuestionWithResults[];\n}\n\nexport const Statistic: FC<TPanel> = memo(({ id }) => {\n  const closeActivePanel = useRouterStore((state) => state.closeActivePanel);\n  const panelParams = useRef(useRouterStore((state) => state.panelParams[state.panelParams.length - 1]));\n\n  const [results, setResults] = useState<IStatistic | null>(null);\n\n  useEffect(() => {\n    const testId = panelParams.current?.testId as string;\n\n    const getResults = async (testId: string) => {\n      const data: IStatistic = await fetchData(`/results/${testId}`);\n      setResults(data);\n    };\n\n    getResults(testId);\n  }, []);\n\n  const renderStatistic = useCallback(() => {\n    if (!results) return null;\n\n    return results.questions.map((question, idx) => {\n      switch (results.testType) {\n        case 'first_click':\n          return (\n            <FirstClickStat\n              sep={idx !== 0}\n              question={question}\n              title={`Вопрос ${idx + 1} из ${results.questions.length}`}\n            />\n          );\n        case 'five_sec':\n          return (\n            <FiveSecStat\n              sep={idx !== 0}\n              question={question}\n              title={`Вопрос ${idx + 1} из ${results.questions.length}`}\n            />\n          );\n        case 'side_by_side':\n          return (\n            <SideBySideStat\n              sep={idx !== 0}\n              question={question}\n              title={`Вопрос ${idx + 1} из ${results.questions.length}`}\n            />\n          );\n      }\n    });\n  }, [results]);\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader\n          separator={false}\n          left={\n            <Tappable\n              onClick={closeActivePanel}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0 10px 2px 0',\n              }}\n            >\n              <Icon28ChevronLeftOutline fill=\"var(--icon_medium)\" />\n              <Text weight=\"regular\" style={{ color: 'var(--text_secondary)' }}>\n                Назад\n              </Text>\n            </Tappable>\n          }\n        >\n          {results?.title}\n        </PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <Div>{renderStatistic()}</Div>\n      </Group>\n    </Panel>\n  );\n});\n","import create from 'zustand';\nimport { TestType } from './testsMocks';\n\nexport type CreateTestQuestion = {\n  title: string;\n  description?: string;\n  data: [string, string?];\n};\n\ntype CreateTestStore = {\n  type?: TestType;\n  name?: string;\n  description?: string;\n  questions?: CreateTestQuestion[];\n  updateName(name?: string): void;\n  updateDescription(desc?: string): void;\n  updateType(type: TestType): void;\n  appendQuestion(question: CreateTestQuestion): void;\n  deleteQuestion(id: number): void;\n  clearAll(): void;\n};\n\nexport const useCreateTestStore = create<CreateTestStore>((set) => ({\n  updateName: (name: string) =>\n    set({\n      name,\n    }),\n  updateDescription: (desc: string) =>\n    set({\n      description: desc,\n    }),\n  updateType: (type: TestType) =>\n    set({\n      type,\n    }),\n  appendQuestion: (question: CreateTestQuestion) =>\n    set((state) => ({\n      questions: [...(state.questions ?? []), question],\n    })),\n  deleteQuestion: (id: number) =>\n    set((state) => {\n      const newQuestions = [...(state.questions ?? [])];\n      newQuestions.splice(id, 1);\n\n      return {\n        questions: newQuestions,\n      };\n    }),\n  clearAll: () =>\n    set({\n      name: undefined,\n      description: undefined,\n      questions: undefined,\n      type: undefined,\n    }),\n}));\n","import { FC, memo, useState } from 'react';\nimport { Icon28ChevronLeftOutline } from '@vkontakte/icons';\nimport { Button, FormItem, Group, Input, Panel, PanelHeader, Spacing, Tappable, Text } from '@vkontakte/vkui';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { useCreateTestStore } from '../../store/createTestStore';\n\nexport const CreateQuestion: FC<TPanel> = memo(({ id }) => {\n  const [title, setTitle] = useState<string>();\n  const [href, setHref] = useState<string>();\n  const [href2, setHref2] = useState<string>();\n  const closeActivePanel = useRouterStore((state) => state.closeActivePanel);\n  const appendQuestion = useCreateTestStore((state) => state.appendQuestion);\n  const testType = useCreateTestStore((state) => state.type);\n\n  const handleSave = () => {\n    if (title && href && ((testType === 'side_by_side' && href2) || testType !== 'side_by_side')) {\n      const data: [string, string?] = [href];\n\n      if (href2) {\n        data.push(href2);\n      }\n\n      appendQuestion({\n        title,\n        data,\n      });\n      closeActivePanel();\n    }\n  };\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader\n          separator={false}\n          left={\n            <Tappable\n              onClick={closeActivePanel}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0 10px 2px 0',\n              }}\n            >\n              <Icon28ChevronLeftOutline fill=\"var(--icon_medium)\" />\n              <Text weight=\"regular\" style={{ color: 'var(--text_secondary)' }}>\n                Назад\n              </Text>\n            </Tappable>\n          }\n        >\n          Вопрос\n        </PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <FormItem top=\"Формулировка вопроса\">\n          <Input\n            value={title}\n            onChange={(ev) => setTitle(ev.target.value)}\n            placeholder=\"Введите формулировку вопроса\"\n          />\n        </FormItem>\n        <div style={{ display: 'flex' }}>\n          <FormItem top=\"Картинка\">\n            <Input value={href} onChange={(ev) => setHref(ev.target.value)} placeholder=\"Введите ссылку на картинку\" />\n          </FormItem>\n          {testType === 'side_by_side' && (\n            <FormItem top=\"Вторая картинка\">\n              <Input\n                value={href2}\n                onChange={(ev) => setHref2(ev.target.value)}\n                placeholder=\"Введите ссылку на вторую картинку\"\n              />\n            </FormItem>\n          )}\n        </div>\n        <div style={{ paddingTop: 24, textAlign: 'right' }}>\n          <Button mode=\"secondary\" style={{ marginRight: 10 }} onClick={closeActivePanel}>\n            Не сохранять\n          </Button>\n          <Button onClick={handleSave} disabled={!title || !href}>\n            Сохранить\n          </Button>\n        </div>\n      </Group>\n    </Panel>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Icon28ChevronLeftOutline } from '@vkontakte/icons';\nimport { Div, Group, Headline, Panel, PanelHeader, Spacing, Tappable, Text } from '@vkontakte/vkui';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { getCaption, getIcon } from '../../utils';\nimport { TestCell } from '../../components/TestCell';\nimport { useCreateTestStore } from '../../store/createTestStore';\nimport { PanelIds } from '../../init/routerEnums';\n\nexport const CreateTest: FC<TPanel> = memo(({ id }) => {\n  const closeActivePanel = useRouterStore((state) => state.closeActivePanel);\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n  const updateType = useCreateTestStore((state) => state.updateType);\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader\n          separator={false}\n          left={\n            <Tappable\n              onClick={closeActivePanel}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0 10px 2px 0',\n              }}\n            >\n              <Icon28ChevronLeftOutline fill=\"var(--icon_medium)\" />\n              <Text weight=\"regular\" style={{ color: 'var(--text_secondary)' }}>\n                Назад\n              </Text>\n            </Tappable>\n          }\n        >\n          Новый тест\n        </PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <Div>\n          <Headline weight=\"regular\" style={{ paddingBottom: 22 }}>\n            Выберите тип теста\n          </Headline>\n          <TestCell\n            caption=\"Тест первого впечатления, оценка экранов или изображений на запоминаемость и понятность\"\n            before={getIcon('five_sec')}\n            disabled={false}\n            onClick={() => {\n              updateType('five_sec');\n              setActivePanel(PanelIds.EditQuestion);\n            }}\n          >\n            {getCaption('five_sec')}\n          </TestCell>\n          <TestCell\n            caption=\"Выбор лучшего варианта страницы, экрана или изображения. Прямое парное сравнение вариантов.\"\n            before={getIcon('side_by_side')}\n            disabled={false}\n            onClick={() => {\n              updateType('side_by_side');\n              setActivePanel(PanelIds.EditQuestion);\n            }}\n          >\n            {getCaption('side_by_side')}\n          </TestCell>\n          <TestCell\n            caption=\"Легко ли пользователю понять, куда кликнуть на экране для выполнения целевого действия.\"\n            before={getIcon('first_click')}\n            disabled={false}\n            onClick={() => {\n              updateType('first_click');\n              setActivePanel(PanelIds.EditQuestion);\n            }}\n          >\n            {getCaption('first_click')}\n          </TestCell>\n        </Div>\n      </Group>\n    </Panel>\n  );\n});\n","import { FC, memo, useRef, useState } from 'react';\nimport { Icon20TrashSmileOutline, Icon28ChevronLeftOutline } from '@vkontakte/icons';\nimport {\n  Button,\n  Div,\n  FormItem,\n  Group,\n  Headline,\n  Input,\n  Link,\n  Panel,\n  PanelHeader,\n  Spacing,\n  Subhead,\n  Tappable,\n  Text,\n} from '@vkontakte/vkui';\nimport { TPanel } from '../TPanel';\nimport { useRouterStore } from '../../store';\nimport { useCreateTestStore } from '../../store/createTestStore';\nimport { getCaption } from '../../utils';\nimport { PanelIds } from '../../init/routerEnums';\nimport { TestCell } from '../../components/TestCell';\nimport { fetchData } from '../../api/Api';\n\nexport const EditQuestion: FC<TPanel> = memo(({ id }) => {\n  const closeActivePanel = useRouterStore((state) => state.closeActivePanel);\n  const setActivePanel = useRouterStore((state) => state.setActivePanel);\n  const testType = useCreateTestStore((state) => state.type);\n  const clearAll = useCreateTestStore((state) => state.clearAll);\n  const deleteQuestion = useCreateTestStore((state) => state.deleteQuestion);\n  const updateName = useCreateTestStore((state) => state.updateName);\n  const name = useCreateTestStore((state) => state.name);\n  const descriptionFromStore = useCreateTestStore((state) => state.description);\n  const updateDescription = useCreateTestStore((state) => state.updateDescription);\n  const questions = useCreateTestStore((state) => state.questions);\n  const panelProps = useRef<{ isEditing: boolean }>(\n    useRouterStore((state) => state.panelParams[state.panelParams.length - 1]) as { isEditing: boolean },\n  );\n  const { isEditing } = panelProps.current ?? {};\n  const [title, setTitle] = useState<string>(name ?? '');\n  const [description, setDescription] = useState<string>(descriptionFromStore ?? '');\n\n  const handleSubmit = async () => {\n    if (questions?.length && questions.length > 0 && description && title) {\n      // TODO API CREATE TEST\n      await fetchData('/test', 'POST', {\n        title,\n        testType,\n        status: 'available',\n        description,\n        questions,\n      });\n      // TODO isEditing = true THEN PUT\n      // PUT BALHBALBLA\n      clearAll();\n      closeActivePanel();\n      closeActivePanel();\n    }\n  };\n\n  return (\n    <Panel id={id}>\n      <Group separator=\"hide\">\n        <PanelHeader\n          separator={false}\n          left={\n            <Tappable\n              onClick={() => {\n                closeActivePanel();\n                clearAll();\n              }}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0 10px 2px 0',\n              }}\n            >\n              <Icon28ChevronLeftOutline fill=\"var(--icon_medium)\" />\n              <Text weight=\"regular\" style={{ color: 'var(--text_secondary)' }}>\n                Назад\n              </Text>\n            </Tappable>\n          }\n        >\n          {testType && getCaption(testType)}\n        </PanelHeader>\n        <Spacing style={{ padding: 0 }} separator />\n        <FormItem top=\"Название теста\">\n          <Input\n            onBlur={() => updateName(title)}\n            value={title}\n            onChange={(ev) => setTitle(ev.target.value)}\n            placeholder=\"Введите название теста\"\n          />\n        </FormItem>\n        <FormItem top=\"Описание теста\">\n          <Input\n            onBlur={() => updateDescription(description)}\n            value={description}\n            onChange={(ev) => setDescription(ev.target.value)}\n            placeholder=\"Введите описание\"\n          />\n        </FormItem>\n        <Spacing separator />\n        <Div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Headline weight=\"regular\">Вопросы</Headline>\n          {!isEditing && (\n            <Link onClick={() => setActivePanel(PanelIds.CreateQuestion)}>\n              <Subhead>Добавить вопрос</Subhead>\n            </Link>\n          )}\n        </Div>\n        <div style={isEditing ? { opacity: 0.4 } : {}}>\n          {questions?.map(({ title, data }, idx) => (\n            <TestCell\n              caption={data.length === 1 ? '1 картинка' : data.length === 2 ? '2 картинки' : '0 картинок'}\n              after={\n                <Tappable onClick={() => deleteQuestion(idx)}>\n                  <Icon20TrashSmileOutline fill=\"var(--icon_medium)\" />\n                </Tappable>\n              }\n            >\n              {title}\n            </TestCell>\n          ))}\n        </div>\n        <Spacing separator />\n        <Div style={{ display: 'flex', justifyContent: isEditing ? 'flex-end' : 'space-between', paddingTop: 24 }}>\n          {!isEditing && <Subhead>После публикации редактировать вопросы нельзя</Subhead>}\n          <Button\n            disabled={!(questions?.length && questions.length > 0 && description && title)}\n            onClick={handleSubmit}\n          >\n            Опубликовать тест\n          </Button>\n        </Div>\n      </Group>\n    </Panel>\n  );\n});\n","import { FC } from 'react';\nimport { View } from '@vkontakte/vkui';\nimport { PanelIds } from 'init/routerEnums';\nimport { RootModal } from './modals/RootModal';\nimport { Home } from './panels/Home/Home';\nimport { useRouterStore } from './store';\nimport { Test } from './panels/Test/Test';\nimport { Success } from './panels/Success/Success';\nimport { MyTests } from './panels/MyTests/MyTests';\nimport { Statistic } from './panels/Statistic/Statistic';\nimport { CreateQuestion } from './panels/CreateQuestion/CreateQuestion';\nimport { CreateTest } from './panels/CreateTest/CreateTest';\nimport { EditQuestion } from './panels/EditQuestion/EditQuestion';\n\nexport const App: FC = () => {\n  const activePanel = useRouterStore((state) => state.activePanel);\n  const activeModal = useRouterStore((state) => state.activeModal);\n  const panelsHistory = useRouterStore((state) => state.panelHistory);\n  const closePanel = useRouterStore((state) => state.closeActivePanel);\n\n  const onSwipeBack = () => {\n    if (activeModal) {\n      return;\n    }\n\n    closePanel();\n  };\n\n  return (\n    <View onSwipeBack={onSwipeBack} history={panelsHistory} modal={<RootModal />} activePanel={activePanel}>\n      <Home id={PanelIds.Home} />\n      <Test id={PanelIds.Test} />\n      <Success id={PanelIds.Success} />\n      <MyTests id={PanelIds.MyTests} />\n      <Statistic id={PanelIds.Statistic} />\n      <CreateQuestion id={PanelIds.CreateQuestion} />\n      <CreateTest id={PanelIds.CreateTest} />\n      <EditQuestion id={PanelIds.EditQuestion} />\n    </View>\n  );\n};\n","import { FC, useEffect, useRef } from 'react';\nimport { AdaptivityProvider, AppRoot, SizeType, SplitCol, SplitLayout, ViewWidth } from '@vkontakte/vkui';\nimport bridge from '@vkontakte/vk-bridge';\nimport { App } from '../App';\n\nexport const Adaptive: FC = () => {\n  const node = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const anchorNode = node.current;\n\n    if (!anchorNode) return;\n\n    const resizeObserver = new ResizeObserver(([entry]) => {\n      if (!entry) return;\n\n      const { height, width } = entry.contentRect;\n      bridge.send('VKWebAppResizeWindow', { width, height });\n    });\n\n    resizeObserver.observe(anchorNode);\n\n    return () => {\n      resizeObserver.unobserve(anchorNode);\n    };\n  }, []);\n\n  return (\n    <AdaptivityProvider sizeX={SizeType.REGULAR} sizeY={SizeType.COMPACT} viewWidth={ViewWidth.DESKTOP}>\n      <AppRoot noLegacyClasses>\n        <SplitLayout>\n          <SplitCol animate={false}>\n            <div ref={node}>\n              <App />\n            </div>\n          </SplitCol>\n        </SplitLayout>\n      </AppRoot>\n    </AdaptivityProvider>\n  );\n};\n","import { FC, useCallback, useEffect, useState } from 'react';\nimport bridge, {\n  AnyReceiveMethodName,\n  AppearanceSchemeType,\n  VKBridgeEvent,\n  VKUpdateConfigData,\n} from '@vkontakte/vk-bridge';\nimport { ConfigProvider as VKUIConfigProvider, Platform, Scheme, WebviewType } from '@vkontakte/vkui';\nimport { Adaptive } from './Adaptive';\n\nexport const ConfigProvider: FC = () => {\n  const [scheme, setScheme] = useState<AppearanceSchemeType>(Scheme.BRIGHT_LIGHT);\n\n  const bridgeListener = useCallback(({ detail: { type, data } }: VKBridgeEvent<AnyReceiveMethodName>) => {\n    if (type !== 'VKWebAppUpdateConfig') {\n      return;\n    }\n\n    setScheme((data as VKUpdateConfigData).scheme);\n  }, []);\n\n  useEffect(() => {\n    bridge.subscribe(bridgeListener);\n    bridge.send('VKWebAppInit');\n\n    return () => bridge.unsubscribe(bridgeListener);\n  }, [bridgeListener]);\n\n  return (\n    <VKUIConfigProvider scheme={scheme} platform={Platform.VKCOM} webviewType={WebviewType.INTERNAL}>\n      <Adaptive />\n    </VKUIConfigProvider>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ConfigProvider } from 'init/ConfigProvider';\n\nimport '@vkontakte/vkui/dist/vkui.css';\n\nReactDOM.render(\n  <StrictMode>\n    <ConfigProvider />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}